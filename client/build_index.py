
from bloomfilter import BloomFilter
from Crypto.Cipher import AES
from Crypto.Hash import MD5
from Crypto.Random import random
import time
import pickle
p = 0.001
count = 0

def build_trapdoor(MK, keyword):
    keyword_index = MD5.new()
    keyword_index.update(keyword)
    ECB_cipher = AES.new(MK, AES.MODE_ECB)
   # print ECB_cipher.encrypt(keyword_index.digest())    
    return ECB_cipher.encrypt(keyword_index.digest())

def searchable_encryption(master_key):
    
    start_time = time.time()
    for line in file1:
        record_index = build_trapdoor(master_key,line.strip()).encode("hex")
        #print record_index
        bloomf.add(record_index)
    
    object_pi = bloomf
    file_pi = open('file.obj', 'w')
    pickle.dump(object_pi, file_pi)
    time_cost = time.time() - start_time
    #print time_cost
    


if __name__ == "__main__":

    document_name = "uploads/fileindex.txt"
    #print document_name
    file1 = open(document_name, 'r')
    file2 = open(document_name, 'r')

    for lines in file2:
        count += 1

    bloomf = BloomFilter(count,p)
    master_key_file_name = "mk1.txt"
    master_key = open(master_key_file_name).read()
    master_key = bytes(master_key[:16])


    searchable_encryption(master_key)
    file1.close()
    file2.close()
    #print "Finished"

