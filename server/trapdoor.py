import os
import shutil
from Crypto.Cipher import AES
from Crypto.Hash import MD5
count = 0
count2 = 0

shutil.rmtree('trapdoors')
os.mkdir("trapdoors")
def build_trapdoor(MK, keyword):
    keyword_index = MD5.new()
    keyword_index.update(str(keyword))
    ECB_cipher = AES.new(MK, AES.MODE_ECB)
    return ECB_cipher.encrypt(keyword_index.digest())

if __name__ == "__main__":
	
    master_key_file_name = "mk2.txt"
    master_key = open(master_key_file_name).read()

    master_key = bytes(master_key[:16])
    
for filename in os.listdir('rules/'):
	with open(os.path.join('rules/', filename)) as f:
			os.mkdir("trapdoors/" + str(count))
			count += 1

count = 0

for filename in os.listdir('rules/'):
	with open(os.path.join('rules/', filename)) as f:
		file1 = open("rules/" + str(count) + "_rule", 'r')
		Lines = file1.readlines()
		for line in Lines:
			keyword = line
			keyword = keyword[:-1]	
			trapdoor_file = open('trapdoors/' + str(count) + '/' + str(count2) + '_trap', 'w')
			trapdoor_of_keyword = build_trapdoor(master_key, keyword)
    			trapdoor_file.write(trapdoor_of_keyword)
			count2 += 1
		    
		count2 = 0
		count +=1
os.remove("file.tar.gz") 
directories = os.system("tar -zcvf file.tar.gz trapdoors/")
